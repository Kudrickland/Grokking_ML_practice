{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "48318362-43f3-49ba-b9c8-3592c8bf26a5",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Импортируем необходимые библиотеки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "9c6af88c-148f-4d98-a8cc-bea0f64faabf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d69b6d9-882f-440a-9a62-bcd510becc3b",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "###  Задаем все необходимые данные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "0ec695a4-d7ab-4d54-827e-baf39b16d559",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 5 6 7]\n",
      "[155 197 244 356 407 448]\n"
     ]
    }
   ],
   "source": [
    "features = np.array([1, 2, 3, 5, 6, 7])\n",
    "labels = np.array([155, 197, 244, 356, 407, 448])\n",
    "print(features)\n",
    "print(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "c12f2e91-ba5e-418b-9873-1580dda074ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1]\n",
      " [2]\n",
      " [3]\n",
      " [5]\n",
      " [6]\n",
      " [7]]\n"
     ]
    }
   ],
   "source": [
    "# Обязательно приводим в матричный вид\n",
    "features_reshaped = features.reshape(-1, 1)\n",
    "print(features_reshaped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "0e8f607a-066f-4922-932a-c2d9471e6635",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Коэффициент: [50.39285714]\n",
      "Пересечение: 99.59523809523819\n"
     ]
    }
   ],
   "source": [
    "model = LinearRegression() # Модель линейной регрессии от sklearn\n",
    "model.fit(features_reshaped, labels) # Обучает модель на основе признаков features_reshaped предсказывать labels\n",
    "\n",
    "# Вывод коэффициента и пересечения\n",
    "print('Коэффициент:', model.coef_)\n",
    "print('Пересечение:', model.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "097dc639-5ae6-4b71-b9ee-45f5b34a68d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Предсказанное значение для 4: [301.16666667]\n"
     ]
    }
   ],
   "source": [
    "new_point = np.array([[4]])\n",
    "predicted_label = model.predict(new_point) # Предсказывает по 4 целевое значение predicted_label\n",
    "print('Предсказанное значение для 4:', predicted_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "58df3b57-f1d7-4014-8d98-3919194960a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_labels = model.predict(features_reshaped)\n",
    "\n",
    "plt.scatter(features, labels, color='blue', label = 'Исходные данные')\n",
    "plt.plot(features, predicted_labels, color='red', label='Регрессия')\n",
    "\n",
    "plt.xlabel('Признаки')\n",
    "plt.ylabel('Предстаказания')\n",
    "plt.title('Линейная Регрессия')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2b3c915-7ca5-4ca4-9487-8d4660b0aaf4",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "# Домашняя работа"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "673dbbb2-8721-413b-b312-744b7011ec89",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 3.3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e97148e7-718d-46cf-83d6-391d1dadc1c0",
   "metadata": {},
   "source": [
    "### Прогнозирование цен на дома\r\n",
    "\r\n",
    "**Данные:**\r\n",
    "| Дом | Площадь | Цена |\r\n",
    "|-----|---------|------|\r\n",
    "| 1   | 100     | 200  |\r\n",
    "| 2   | 200     | 475  |\r\n",
    "| 3   | 200     | 400  |\r\n",
    "| 4   | 250     | 520  |\r\n",
    "| 5   | 325     | 735  |\r\n",
    "\r\n",
    "**Модель:**  \r\n",
    "`цена = 2 × площадь + 50`\r\n",
    "\r\n",
    "**Задания:**\r\n",
    "1. Рассчитать прогнозные цены\r\n",
    "2. Вычислить MAE\r\n",
    "3. Вычислить MSE\r\n",
    "\r\n",
    "**MAE** = среднее |факт - прогноз|  \r\n",
    "**MSE** = среднее (факт - прогноз)²я MSE: усредните квадраты разницзницы в квадрат, затем усредните"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "30c03438-f039-4743-98aa-39051d84d26c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Генерируем ДатаФрейм\n",
    "df = pd.DataFrame({'Дом':[1, 2, 3, 4, 5], 'Размер(s)':[100, 200, 200, 250, 325], 'Вознаграждение(p)':[200, 475, 400, 520, 735]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "4ddb4efc-9670-458f-993a-48349e2dc299",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Дом</th>\n",
       "      <th>Размер(s)</th>\n",
       "      <th>Вознаграждение(p)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>200</td>\n",
       "      <td>475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>200</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>250</td>\n",
       "      <td>520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>325</td>\n",
       "      <td>735</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Дом  Размер(s)  Вознаграждение(p)\n",
       "0    1        100                200\n",
       "1    2        200                475\n",
       "2    3        200                400\n",
       "3    4        250                520\n",
       "4    5        325                735"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "5e7f6ae9-5751-4ff9-965b-bcf6244df0b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#A\n",
    "df['Предсказанная цена'] = (2 * df['Размер(s)'] + 50) # Создаем новый столбец с предсказанной ценной"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "6e2870fe-3502-4972-bbfc-f0370f5f17aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Дом</th>\n",
       "      <th>Размер(s)</th>\n",
       "      <th>Вознаграждение(p)</th>\n",
       "      <th>Предсказанная цена</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>200</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>200</td>\n",
       "      <td>475</td>\n",
       "      <td>450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>200</td>\n",
       "      <td>400</td>\n",
       "      <td>450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>250</td>\n",
       "      <td>520</td>\n",
       "      <td>550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>325</td>\n",
       "      <td>735</td>\n",
       "      <td>700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Дом  Размер(s)  Вознаграждение(p)  Предсказанная цена\n",
       "0    1        100                200                 250\n",
       "1    2        200                475                 450\n",
       "2    3        200                400                 450\n",
       "3    4        250                520                 550\n",
       "4    5        325                735                 700"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "37165d1d-efd8-4022-8f5b-5f7b15ffe341",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Средняя абсолютная ошибка: 38.00\n"
     ]
    }
   ],
   "source": [
    "#Б\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "mae = mean_absolute_error(df['Вознаграждение(p)'], df['Предсказанная цена']) # Значение истинное и значение предсказанное\n",
    "print(f\"Средняя абсолютная ошибка: {mae:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "58322eb4-18db-4cd7-9a38-21a4f0ebbd96",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Или используя мат.формулу\n",
    "mae_math = np.dot(np.sum(np.array(np.abs(df['Вознаграждение(p)'] - df['Предсказанная цена']))), 1/5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "253b6eb8-0608-4d3c-8d11-145cd0cfa85e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38.0"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mae_math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "f6c3e509-4009-4c27-a9c5-e8813ec9ecf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Среднеквадратичная ошибка: 39.37\n"
     ]
    }
   ],
   "source": [
    "#В\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse = np.sqrt(mean_squared_error(df['Вознаграждение(p)'], df['Предсказанная цена'])) # Значение истинное и значение предсказанное\n",
    "print(f\"Среднеквадратичная ошибка: {mse:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "8456d11e-ef23-4e1a-af8e-345878c841e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Или используя мат.формулу\n",
    "mse_math = np.sqrt(np.dot(np.sum(np.array(np.power(df['Вознаграждение(p)'] - df['Предсказанная цена'], 2))), 1/5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "38d82bf9-8873-43a1-a6ec-9b9548342222",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39.370039370059054"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mse_math"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2f328ae-0bbe-4e1e-b960-b2e987dea219",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "#### 3.4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "500edd7e-0f84-4c82-9e42-b2891506efae",
   "metadata": {},
   "source": [
    "Дана прямая $ŷ = 2x + 3$, необходимо переместить её ближе к точку $(x, y)=(5,15)$ используя абсолютный и квадратический подход. Скорость обучения задать как $η=0.01$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "c664969a-136b-47b4-af1f-eb9f916a1806",
   "metadata": {},
   "outputs": [],
   "source": [
    "#A\n",
    "def abs_trick(intercept, coeff, points, learning_rate):\n",
    "    x = points[0]\n",
    "    y_pred = points[1]\n",
    "    y_now = coeff * x + intercept\n",
    "    if y_now < y_pred:\n",
    "        coeff += learning_rate * x\n",
    "        intercept += learning_rate\n",
    "    elif y_now > y_pred:\n",
    "        coeff -= learning_rate * x\n",
    "        intercept -= learning_rate\n",
    "        \n",
    "    return intercept, coeff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "b4ff2ba3-c48b-4a70-919e-e50744c8116e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.01, 2.05)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abs_trick(3, 2, (5, 15), 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e1068325-936c-4f66-90dd-36e1edcc1d87",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Б\n",
    "def squared_trick(intercept, coeff, points, learning_rate):\n",
    "    x = points[0]\n",
    "    y_pred = points[1]\n",
    "    y_now = coeff * x + intercept\n",
    "    coeff += learning_rate * (y_pred-y_now) * x\n",
    "    intercept += learning_rate* (y_pred-y_now)\n",
    "    return intercept, coeff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "c81cc0f9-f564-4aac-a536-41e14b00640a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.02, 2.1)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "squared_trick(3, 2, (5, 15), 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8be8cd4e-fbca-4ca5-80cf-51fb2a36da27",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
